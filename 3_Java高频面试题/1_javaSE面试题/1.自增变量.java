public class Main{
    public static void main(String[] args){
        int i = 1;
        i = i++; // 关键理解这里的结果：i = 1
        /* ----- 【i的自增，不通过操作数栈】-------- */
        // 宏观上理解：先赋值，i再自增，“如果赋值给自己，自增被覆盖不生效”
        // 底层理解：（模拟一遍操作，一定可以算对）
        // * 局部变量表 + 操作数栈
        //  1. 赋值=，最后计算
        //  2. =右边，从左到右加载值，依次压入操作数栈
        //  3. 实际先算哪个，看运算符的优先级
        //  4. 自增或自减操作，都是直接修改变量的值，不通过操作数栈
        //  5. 最后的赋值之前，临时结果也是存储在操作数栈中
        
        // 建议：《JVM虚拟机规范》关于指令的部分
        System.out.println("i = " + i); // i=1
        int j = i++; // 先赋值，j=1, i再自增，“如果赋值给别人，自增没覆盖仍然有效” i=2
        System.out.println("i = " + i);
        System.out.println("j = " + j);
        int k = i + ++i * i++; // k = 2 + 3（i先自增,i=3,再压入栈） * 3（先将i压入栈，此时i=3,其后i自增等于4） 
        System.out.println("i = " + i);
        System.out.println("k = " + k);
    }
}